# Watches s3 bucket for updates to goMicroserviceTemplate binary
# On update, new binary is downloaded and goMicroserviceTemplate service is restarted
# Place this file in /etc/init/
#
# Relies on the ENVTYPE being set to 'local', 'dev', or 'prod' in /etc/environment
# To set: echo 'ENVTYPE="dev"' >> /etc/environment

start on filesystem or runlevel [2345]
stop on runlevel [!2345]

console log
respawn
script
  set -e

  # Write changes to syslog
  exec >/dev/kmsg 2>&1

  # Import variable set in /etc/environment
  . /etc/environment

  if [ "$ENVTYPE" = "local" ]
  then
    export AWS_CONFIG_FILE="/home/[username]/.aws/config"
    SOURCEBUCKET="target-bucket-dev"
    SOURCEOBJECT="goMicroserviceTemplate/local/goMicroserviceTemplate"
  elif [ "$ENVTYPE" = "dev" ]
  then
    SOURCEBUCKET="target-bucket-dev"
    SOURCEOBJECT="goMicroserviceTemplate/goMicroserviceTemplate"
  elif [ "$ENVTYPE" = "prod" ]
  then
    SOURCEBUCKET="target-bucket-prod"
    SOURCEOBJECT="goMicroserviceTemplate/goMicroserviceTemplate"
  else
    echo "No ENVTYPE variable set in /etc/environment. Exiting."
    exit 1
  fi

  BINTARGET="/usr/local/bin/goMicroserviceTemplate"
  while true
  do
    sleep 10

    # Check if the MD5 sum of the package is different than what we have
    if test -e $BINTARGET.gz && aws s3api head-object --bucket $SOURCEBUCKET --key $SOURCEOBJECT.gz | grep `md5sum $BINTARGET.gz | awk '{print $1;}'` > /dev/null; then
      # Found, do nothing
      echo "Do nothing" > /dev/null
    else
      echo "Updating goMicroserviceTemplate"
      aws s3 cp s3://$SOURCEBUCKET/$SOURCEOBJECT.gz $BINTARGET.gz
      gzip -dkf $BINTARGET.gz
      chmod +x $BINTARGET
      service goMicroserviceTemplate restart
    fi
  done
end script
